========================
スクリプトファイルの構成
========================

Python はモジュールのトップレベルから記述を開始できますが、
だらだらと書き進めてしまうと可読性が低くなります。
基本的な構成を統一することでソースコードを共有しやすい状態にしましょう。

前のセクション (:doc:`toy-program`) からは、次の部分を共通項として抽出できます。

* main 関数の記述
* コマンドライン引数の処理
* shebang の記述、エンコーディングの指定 (PEP 263)

main 関数
=========

C言語や Java のように、処理を開始する手続きは ``main()`` 関数として独立させましょう。
これは慣習の面と、実際的な面の両方で有用です。
``main()`` 関数を作ったら ``test()`` 関数も作るようにしてください。
実際に必要な処理と実験的な処理を分離しましょう。
実装とテストケースを平行して実装することで、 `print` デバッグからの脱却にも役立ちます。

コマンドライン引数
==================

コマンドライン引数はオプションと実引数から構成されます。
オプションはハイフンから始まる文字列で、ハイフンが１つの場合はショートオプション、２つの場合はロングオプションと呼ばれます。
また、値を取るオプションと取らないオプションもあります。
詳しくは Unix 系のコマンドを調べてください。

Python でコマンドライン引数を扱う場合は標準モジュールの `argparse` を使います。

サードパーティーのライブラリを使う場合は `docopt` も実際的だと考えられます。
`docopt` はドキュメントも一緒に書けること、Python 以外のプログラム言語（例えば Go）への移植が容易なことがメリットです。
フラグをいくつかの部分で個別に管理したい場合には Google の `absl.flags` も有用かもしれません。
Django や Twisted などのフレームワークを利用する場合はオプションライブラリが同梱されています。

* `docopt`_ - docopt.org - Command-line interface description language
* `abseil.flags`_ - Abseil は Google の C++ のオープンソースをまとめているプロジェクトです。Python ライブラリも少し含まれます。

.. _docopt: http://docopt.org/
.. _abseil.flags: https://abseil.io/docs/python/guides/flags

オプションの処理
----------------

コマンドラインスクリプトでは、以下の引数をオプションを検討してください。

* help          - スクリプトの使い方を表示する
* version       - スクリプトのバージョンを表示する
* verbosity     - ログ出力の冗長性を高くする
* quiet         - ログ出力の冗長性を低くする
* force         - 何が何でも実行させる
* dryrun        - 実際には実行しない
* configuration - 設定ファイルを指定する


自動プログラミング
==================

フルスクラッチでソースコードを記述するのではなく、
何らかの雛型 / スニペットからソースコードを記述するクセを付けましょう。

* `自動プログラミング`_ - wikipepia.org
* `Generative Programming - Methods, Tools, and Applications`_

.. _自動プログラミング: http://ja.wikipedia.org/wiki/%E8%87%AA%E5%8B%95%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0
.. _Generative Programming - Methods, Tools, and Applications: http://www.generative-programming.org/

雛型を共有することで、単純なエンコーディングの間違いは減少し、
コマンドライン引数に関する最低限のルールは守られます。
パッケージの共有でも同様です。
定型の記述に時間をかけることなく、関心の高い部分の実装に時間をかけられることが大切です。

宿題
----

自分用のスクリプトテンプレートを用意してください。

以降の章では次の３つを前提として進めます。

* ``if __name__ == '__main__':`` で main 関数を呼び出す。
* main 関数から個別の処理を呼び出し、個別の処理は test からも確認可能にする。
* main 関数の最初で引数を処理する。

例 (:file:`boilerplate.py`)

.. literalinclude:: /../src/boilerplate.py
   :encoding: utf-8
   :language: python
