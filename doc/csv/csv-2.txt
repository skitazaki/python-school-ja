=========================
標準モジュール csv を使う
=========================

前の章のように自前で実装すると次の二点への対応が難しくなります。

* エスケープ処理
* 区切り文字の変更

標準 csv モジュールを使うとこうした問題点を回避できます。

* `13.1. csv — CSV File Reading and Writing`_ - docs.python.org (公式ドキュメント)

ステップバイステップの使い方は、とりあえずこれを読んでください。

* `csv – カンマ区切りのファイル`_ (PyMOTW)

.. _13.1. csv — CSV File Reading and Writing: https://docs.python.org/3/library/csv.html
.. _csv – カンマ区切りのファイル: http://www.doughellmann.com/PyMOTW-ja/csv/

csv モジュール
==============

csv モジュールを使って、 :doc:`csv-1` と同様の処理を実装しましょう。
実行結果は一緒になりますね。

.. literalinclude:: /../src/csv-2.py
   :language: python

このファイルを :file:`csv-2.py` とすると、差分は以下の通りです。

.. code-block:: diff

    @@ -5,6 +5,7 @@
     """

     import argparse
    +import csv  # import standard "csv" module
     import logging


    @@ -41,9 +42,8 @@
         """Parse daily Tokyo stock prices, and calculate up/down.
         """
         with open(args.filename[0]) as fp:
    -        for line in fp:
    -            l = line.rstrip('\r\n')
    -            t = l.split(',')
    +        reader = csv.reader(fp)  # Instantiate CSV reader with file pointer.
    +        for t in reader:
                 # Assign each field on individual variables.
                 day = t[0]
                 price_begin = float(t[1])


宿題
====

csv モジュールの ``reader()`` 関数は *dialect* や *delimiter*, *quotechar* という引数を解釈します。
これらを切り替えることで、エスケープ文字や区切り文字を変更できます。

* 公式ドキュメントのコード例に目を通し、空白区切りやコロン区切りのデータを扱っている部分を確認してください。
* コマンドラインのオプションを解釈し、区切り文字をオプション引数で与えられるようにしてください。
