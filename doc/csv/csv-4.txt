==============================
組込み関数 (zip / dict) を使う
==============================

前の章ではファイルの１行目にあるヘッダー行をスキップしていました。
今度は、組込み関数 (``zip`` / ``dict``) を使ってレコードを辞書型に変換してみましょう。

zip のテスト
========================================

コンソールで :command:`python` を実行して REPL (`Read–eval–print loop`_) モードに入りましょう。
インタラクティブに動作を確認できます。

.. _`Read–eval–print loop`: http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop

２つのタプル "a", "b" を用意して、それらに ``zip()`` を適用させます。

.. code-block:: bash

    $ python
    >>> a = ("A", "B", "C")
    >>> b = (1, 2, 3)
    >>> zip(a, b)
    <zip object at 0x1018e5320>
    >>> for t in zip(a, b):
    ...     t
    ...
    ('A', 1)
    ('B', 2)
    ('C', 3)

それぞれの同じインデックスにある要素をまとめていることが分かりました。

dict のテスト
========================================

次に、 ``dict()`` を使ってみます。
引数には配列の配列（多次元配列）を渡します。

.. code-block:: bash

    $ python
    >>> a = (('A', 1), ('B', 2), ('C', 3))
    >>> dict(a)
    {'A': 1, 'B': 2, 'C': 3}

先ほどの ``zip()`` と合わせて考えると、
２つの配列から、それぞれのインデックス番号でまとめた辞書オブジェクトを生成できました。

実装の改修
========================================

列の情報を辞書で保持し、名称とデータ型を持つようにします。
そして、入力行に対して ``zip`` と ``dict`` を適用することで辞書オブジェクトに変換します。
辞書で扱うと、ソースコード内のマジックナンバーを少なく保てるメリットがあります。

:file:`csv-2.py` を改修して :file:`csv-4.py` としています。

.. literalinclude:: /../src/csv-4.py
   :encoding: utf-8
   :language: python

宿題
====

1. *csv* モジュールには ``DictReader`` クラスがあります。このクラスを使って実装してください。
2. *collections* モジュールの `namedtuple()`_ を使って実装してください。

.. _`namedtuple()`: https://docs.python.org/3/library/collections.html#collections.namedtuple
