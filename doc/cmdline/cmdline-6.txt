=============
fabric を使う
=============

アプリケーションのデプロイやシステム管理を簡単に扱えるライブラリとして
*fabric* があります。

* `fabric`_ - docs.fabfile.org

.. _fabric: http://www.fabfile.org/

fabric のインストール
=====================

:command:`pip` で *fabric* をインストールします。

.. code-block:: bash

    $ python3 -m pip install fabric

:command:`fab` コマンドが使えるようになります。

.. code-block:: bash

    $ fab --version
    Fabric 1.8.3
    Paramiko 1.12.4

fabfile.py
==========

*fabric* では :file:`fabfile.py` というファイルを使います。
:command:`make` における :file:`Makefile` のようなものです。

:file:`fabfile.py` は通常の Python スクリプトですが、
関数が :command:`fab` コマンドとのインターフェイスとなります。
:file:`fabfile.py` に Python の関数を定義し、 :command:`fab` コマンドの引数に渡すことで実行されます。

次の４つの関数を定義してみましょう。

* hello:  サーバ名を表示
* check:  Python スクリプトの構文をチェック (手元で実行)
* test:   Python スクリプトのテストを実行 (手元で実行)
* deploy: Python スクリプトを配置

:file:`fabfile.py`

.. literalinclude:: /../src/fabfile.py
   :encoding: utf-8
   :language: python

繰り返しになりますが、 :file:`fabfile.py` は普通の Python スクリプトですから、
コマンド用の関数を呼び出すこともできます。
*all* のようにまとめて ``check()``, ``test()``, ``deploy()`` を実行してくれます。
デフォルトではエラーが発生した場合は途中で処理を中断します。
エラー時の挙動を変更したい場合は、 ``try-except`` を使って自分で何らかの処理を記述してください。

fab コマンドの実行
==================

実行結果 (hello)

.. code-block:: bash

    $ fab hello
    No hosts found. Please specify (single) host string for connection: localhost
    [localhost] run: uname -s
    [localhost] Passphrase for private key:
    [localhost] out: Could not open a connection to your authentication agent.
    [localhost] out: Darwin


    Done.
    Disconnecting from localhost... done.

実行結果 (check)

.. code-block:: bash

    $ fab check

実行結果 (test)

.. code-block:: bash

    $ fab test
    [localhost] local: nosetests *.py
    ........
    ----------------------------------------------------------------------
    Ran 8 tests in 0.002s

    OK

    Done.

実行結果 (deploy)

.. code-block:: bash

    $ fab deploy
    No hosts found. Please specify (single) host string for connection: localhost
    [localhost] Passphrase for private key:
    [localhost] put: downloader.py -> /tmp/downloader.py

    Done.
    Disconnecting from localhost... done.

:command:`fab` はたくさんのオプションを受け付けます。
たとえば ``-H`` オプションでホストを指定できます。

.. code-block:: bash

    $ fab -H localhost deploy
    [localhost] Executing task 'deploy'
    [localhost] Passphrase for private key:
    [localhost] put: downloader.py -> /tmp/downloader.py

    Done.
    Disconnecting from localhost... done.

ホストはカンマ区切りで複数指定できます。
複数のサーバーに平行してファイルを配布する場合には非常に便利でしょう。
その他のオプションはマニュアルやヘルプなどで確認してください。

.. note::

    対話的にパスワードを入力するのではなく鍵認証を使う方法や、
    :file:`~/.ssh/config` の設定を流用する方法もあります。
    ブログ記事などを参照する際はバージョンに注意してください。
    *paramiko* に含まれる `SSHConfig` 使って自前でファイルを解析している例もありますが、
    *fabric* のバージョン 1.4 以降では `use_ssh_config`_ を使いましょう。

.. _`use_ssh_config`: http://docs.fabfile.org/en/1.8/usage/env.html#use-ssh-config

fabric に関する日本語の情報は少ないかもしれません。
`Overview and Tutorial`_ は英語ですが、サンプルコードを読めば雰囲気はつかめると思います。

.. _Overview and Tutorial: http://docs.fabfile.org/en/1.8/tutorial.html

また、github のようなサイトで検索すると使用例が見つかります。

* `fabfile.py で検索`_ - github.com

.. _fabfile.py で検索: https://github.com/search?q=fabfile.py

より簡単に使い始めるには `Ansible`_ も検討してみてください。

.. _`Ansible`: http://www.ansible.com/home

宿題
====

1. *fabric* を使って複数の Linux マシンに :file:`.bashrc` を配布してみましょう。
2. リモートにある Linux マシンに、同じ構成でスクリプト群を配布してみましょう。
3. リモートにある Linux マシンで、Python の最新バージョンをソースコードからコンパイルさせてみましょう。
