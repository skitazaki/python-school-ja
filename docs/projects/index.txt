プロジェクトの構成
==================
ある程度のスクリプトを記述できるようになったら、
ソフトウェアの「品質」にも注意しましょう。
何を持って高品質とするかは難しいところですが、
基本的にはソフトウェアのライフサイクルを意識して議論すべきです。
要求を引き出すためのプロトタイプ実装なのか、コンセプト実証なのか、
はたまた製品 / サービスとして出荷するための実装かで、
「良い」の定義は変わってきます。
詳しくは Wikipedia の記事からリンクを辿るなり、"software lifecycle" などで検索してみましょう。

* `ソフトウェア開発工程`_ - wikipedia.org
* `Quality Assurance`_ - sentientit.net

.. _ソフトウェア開発工程: http://ja.wikipedia.org/wiki/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E5%B7%A5%E7%A8%8B
.. _Quality Assurance: http://www.sentientit.net/Services/Quality-Assurance.aspx

ここでは評価のひとつの軸としてのテスト、文書化の方法、
実装をサポートするためのビルドツールについて触れます。
Python 固有のこともありますが、どのプログラミング言語でも大事なフェーズ (必須ではない) になります。
また、ウォーターフォール型や反復型といった開発工程の方法論とは独立した内容です。
テストを書くから TDD とかアジャイルとか横文字たくさんでモダンな構成、
という訳ではありませんので気をつけましょう。

目次:

.. toctree::
   :maxdepth: 2

   tests-1
   tests-2
   tools-1
   tools-2

..
   documents-1
   documents-2

さらに興味がある場合には "CMMI", "ISO 9000", "ISO/IEC 15504", "UML" などについて調べてみてください。

